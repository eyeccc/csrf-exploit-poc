from flask import Flask, request, jsonify, redirect
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///verysecure.db'
app.secret_key = b'1Th1nkTh1s1sV3ryS3cr3t_K3y'
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
csrf_token = '!amV3ryS3cur3T0k3n'


class Campaign(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    status = db.Column(db.Boolean, default=False, nullable=False)

class User(UserMixin):
    def is_authenticated(self):
        return True

    def is_active(self):
        return True

    def is_anonymous(self):
        return False

    def get_id(self):
        return '1'

db.drop_all()
db.create_all()
campaign1 = Campaign(name='campaign1', status=True)
campaign2 = Campaign(name='campaign2', status=True)
db.session.add(campaign1)
db.session.add(campaign2)
db.session.commit()

@login_manager.user_loader
def load_user(user_id):
    user = User()
    return user

@app.route('/')
@login_required
def dashboard():
    campaign_html = '<table><th>Name</th><th>Status</th><th>--</th>'
    campaigns = Campaign.query.all()
    for campaign in campaigns:
        status = 'Running' if campaign.status else 'Stopped'
        campaign_html += f'''
            <tr>
                <td>{campaign.name}</td>
                <td>{status}</td>
                <td>
                    <form method="POST" action="/stop_campaign">
                      <input name="csrf_token" value="{csrf_token}" type="hidden">
                      <input name="id" value="{campaign.id}" type='hidden'>
                      <input type="submit" value="Change"/>
                    </form>
                </td>
            </tr>'''
    return campaign_html + '</table>'

@app.route('/stop_campaign', methods=['POST'])
@login_required
def stop_campaign():
    if request.form['csrf_token'] == csrf_token:
        campaign_id = int(request.form['id'])
        campaign = Campaign.query.filter_by(id=campaign_id).first()
        campaign.status = not campaign.status
        db.session.commit()
        return jsonify({'success': True})
    else:
        return jsonify({'success': False}), 401

@app.route('/login', methods=['GET', 'POST'])
def login():
    user = User()
    login_user(user)
    return redirect('/')
